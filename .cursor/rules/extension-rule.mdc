---
description:
globs:
alwaysApply: false
---

# SimpliPass – Cursor Rules for Autofill Logic (Chrome Extension)

This rule governs how Cursor must handle **Autofill logic** inside the SimpliPass Chrome Extension.  
The autofill mechanism includes **storage**, **retrieval**, and **injection** of credentials.

---

## ✅ Cursor Must Always...

### 🧠 Work With Secure Principles

- Use **in-memory variables** (e.g. Zustand store, React Context) to hold sensitive data like session keys or decrypted credentials.
- Use **Chrome messaging** (e.g. `chrome.runtime.sendMessage`) to communicate securely between background and content scripts.
- Ensure **zero sensitive data is persisted** to `chrome.storage`, `localStorage`, or IndexedDB unless explicitly authorized.

### 🔒 Handle Session Keys Properly

- Session keys must **never be stored in `chrome.storage.local`** or any persistent storage.
- They must be kept **only in background memory** and cleared when:
  - The extension is reloaded
  - The session ends
  - The user signs out

### 📦 Use Appropriate Storage Locations

| Data Type                    | Where to Store     | Notes |
|-----------------------------|--------------------|-------|
| Session keys (encryption)   | RAM only (memory)  | 🔒 Never persist |
| Decrypted credentials       | RAM only (store)   | Reset on popup close |

### 📤 Autofill Workflow

1. **Trigger Detection (content script)**  
   - Detect login forms on `DOMContentLoaded` or with MutationObserver
   - Extract origin and input fields (username/password)

2. **Message to Background**  
   - Ask background for matching credentials based on domain

3. **Background Loads & Decrypts**  
   - Decrypt credentials in memory
   - Match by `url` or `domain`

4. **Response to Content Script**  
   - Return only matching, decrypted credentials (email, password)
   - Never send full vault

5. **Inject into Page (content script)**  
   - Autofill using `HTMLInputElement.value`
   - Dispatch `input` and `change` events for compatibility

6. **Show Popover (optional)**  
   - Use floating UI or tooltip anchored to the input field
   - Let user select from matching credentials
   - Popover must not persist decrypted data beyond selection

---

## ❌ Cursor Must Never...

- 🚫 Store decrypted credentials or session keys in `chrome.storage.local`
- 🚫 Write to IndexedDB or localStorage with sensitive data
- 🚫 Bypass messaging with direct access from content → background
- 🚫 Inject credentials without user interaction (unless explicitly triggered)
- 🚫 Leave popover open across domain navigation or reloads
- 🚫 Any popover or popover must always be displays into an Iframe for security purpose

---

## 🧪 Testing Requirements

- Unit test all logic used for:
  - Matching credentials to domains
  - Decrypting data with correct keys
- Run integration tests for:
  - Message round-trip (content → background → content)
  - Autofill success/failure
  - Popover rendering and selection behavior

---

## 🧠 Architecture Expectations

- Keep domain logic in `shared/logic/autofill.ts`
- Use `extension/background.ts` and `extension/content.ts` for main flows
- Avoid logic duplication: centralize domain parsing, decryption, filtering
- All autofill logic must respect SimpliPass global Cursor Rules

---

## ✅ Goal

Autofill should be **secure**, **responsive**, and **non-persistent**.  
All decrypted data lives **only in memory**.  
The user stays in control at every step.