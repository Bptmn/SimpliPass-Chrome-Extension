---
alwaysApply: true
---

# SimpliPass Cursor Rules

These rules define the architectural, structural, and functional constraints for Cursor when operating within the SimpliPass project.

---

## Important Principles

- Do not flatter or reinforce assumptions. Always challenge the request if it's not aligned with best practices.
- Always answer based on established best practices.
- Always suggest improvements if the user’s request introduces poor design, security flaws, or unnecessary complexity.
- Always update file-level and inline comments when modifying any file.
- Keep code production-grade. Never use placeholder logic or fake data.
- Hooks must be concise, clear, commented
- When making changes, ensure that non obselete code is removed

---

## Layered Architecture (Three-Layer Model)

### Layer 1: Hooks (UI Layer)
- Simple, readable functions.
- Manage UI state only.
- Do not include business or platform logic.
- Handle loading states and errors.
- Must return stable, typed results for UI consumption.
- Steps in comments must be clearly numbered (e.g., Step 1, Step 2).

### Layer 2: Services (Business Logic Layer)
- Contain business logic orchestration.
- Transform and validate data.
- Never directly interact with platform APIs.
- Only called by hooks or other services.
- Pure functions when possible.
- Platform-agnostic.

### Layer 3: Libraries / Adapters / Utils (Integration Layer)
- Handle external APIs, platform-specific calls, crypto, or storage.
- Platform-specific implementations must live in adapters.
- Called only by services.
- No business logic.
- Low-level focus.

---

## Navigation (Routing) Rules

- All navigation must use the global router via `useAppRouterContext()` (from AppRouterProvider).
- Hooks that perform navigation must never use fallback callbacks (e.g., `onSuccess`) — always navigate directly via context.
- Never mix router calls with other triggers like redirect flags or manually mutating state.
- Pages must not decide navigation logic — they call hooks or services that do.
- Navigation must be centralized, explicit, and testable.

---

## State & Data Flow Model

- UI reads only from Zustand stores and secure local storage.
- No direct access to Firestore or cloud storage in hooks or UI.
- Platform adapters handle hydration and vault restoration.
- All decrypted values are ephemeral in memory only.
- `logout()` must clear RAM and persistent secret keys.

---

## Cursor Import Convention

### Import Order
```ts
// External
import React from 'react';
// Hooks (Layer 1)
import { useLoginFlow } from '@core/hooks';
// Services (Layer 2)
import { loginUser } from '@core/services';
// Libraries (Layer 3)
import { loginWithCognito } from '@core/libraries';
// Types
import type { LoginResult } from '@core/types';
```

- Always use absolute imports starting with `@common`, `@core`, `@mobile`, `@extension`, or `@shared`.
- Never use relative imports like `../../../`.

---

## Secure Storage by Platform

### Mobile
- Use `expo-secure-store`.

### Chrome Extension
- Use `chrome.storage.session`.

---

## Styling Rules

- Never use `marginTop` or `marginBottom`.
- Use `gap` via shared layout classes (`formContainer`, `scrollView`, etc.).

---

## Error Handling Strategy

- Always use custom error classes by layer (`SimpliPassError`, `AuthenticationError`, etc.).
- Errors must be propagated with contextual information.
- All thrown errors must include an error code and origin layer.

### Example
```ts
export class SimpliPassError extends Error {
  constructor(message, code, layer, originalError) {
    super(message);
    this.code = code;
    this.layer = layer;
    this.originalError = originalError;
  }
}
```

---

## Build & Validation Checklist

After any structural or logic-level change:
```bash
npm run lint
npm run test
npm run build
```

Cursor must fix all lint/type errors and ensure the app builds cleanly before completing any task.

---

## Summary Constraints

- Never bypass the three-layer model.
- Never persist decrypted data.
- Never use platform logic in shared folders (`common/`, `core/services/`).
- Always validate types, tests, and build before completion.
- Only use Zustand for UI-driven state.
- Keep hooks focused on UI state.
- Keep services focused on business rules.
- Keep libraries focused on integration/platform-specific logic.
