---
description: SimpliPass Cursor Global Rules – Post-Refactor Architecture
globs: 
alwaysApply: true
---

# 📐 SimpliPass – Global Cursor Rules  
*(Unified Monorepo for Mobile & Extension – React Native / Manifest V3)*

## 🧠 Architecture Foundations

### ✅ Single Source of Truth
All UI data must come from memory (Zustand states). UI logic never fetches directly from storage or network.

### ✅ Platform Separation
- Shared UI and logic must remain platform-agnostic (in `app/` and `core/`)
- Platform-specific logic must be isolated in `mobile/` or `extension/`
- Use `core/adapters/platform.adapter.ts` to abstract all platform-specific implementations

### ✅ Feature Verticalization
Related business logic should be grouped by domain (e.g. credentials, auth) within `core/`.

### ✅ Secure by Design
- No decrypted data is ever persisted
- All encryption/decryption handled via `core/crypto` or `core/utils/encryption`
- Platform-specific persistence must use encrypted local storage or secure keychain

---

## 📁 Package Responsibilities

```
packages/
├── app/        → Shared UI (popup + mobile)
├── core/       → Platform-agnostic logic, auth, state, crypto
├── mobile/     → Mobile-specific services, keychain access
├── extension/  → Chrome-specific background, content, storage
```

---

## 🧩 Cursor Execution Strategy

### ✅ Cursor Must Always
- Think → Plan → Execute → Report
- Organize changes by domain (update types → logic → UI)
- Use `platform.adapter.ts` for cross-platform logic
- Update related tests to reflect changes
- Update related readme file to reflect changes
- Validate with:
```bash
npm run lint && npm run build && npm run test
```

### 🧪 Testing
- All business logic must have `*.test.ts`
- All UI components must have `*.test.tsx` and `*.stories.tsx`
- Include `testID` and `accessibilityLabel` for interactive UI

### 🎨 Design System
- Use `@/core/design/tokens` for color, spacing, typography
- Structure layout using `pageContainer`, `scrollView`, etc.
- Never use inline styles or hardcoded values

---

## 🧱 Cursor Coding Constraints

### ✅ Always Use
- React Native components (`<View>`, `<Text>`, etc.)
- Zustand for all state access and updates
- Absolute imports from `@app`, `@core`, `@mobile`, `@extension`, `@shared`
- Error boundaries and consistent return types in logic

### ❌ Never Use
- `chrome.*` APIs outside `extension/`
- `any`/`unknown` types unless explicitly justified
- Direct Firestore/Storage SDKs in UI
- Raw access to keychain, storage, or memory in `app/` or `core/logic/`
- Duplicate logic (always centralize in `core/logic/`)
- `marginTop`/`marginBottom`: Use `gap` via layout classes only

---

## 🧠 Cursor Memory Model

- UI reads from Zustand only (no storage fallback)
- Platform-specific adapters restore vault and hydrate state on launch
- All decrypted values are ephemeral in RAM
- `logout()` must clear all RAM + persistent user secret

---

## 📚 Cursor File Naming & Import Conventions

### File Names
```
Components:      CredentialCard.tsx
Stores:          credentials.state.ts
Hooks:           useBiometry.ts
Utilities:       decryptVault.ts
Types:           types.ts / interfaces.ts
Tests:           *.test.ts(x)
Stories:         *.stories.tsx
```

### Import Order
```ts
// External
import React from 'react';
// Aliased
import { loginUser } from '@core/logic/auth';
// Relative
import styles from './styles';
```

---

## 🔐 Platform Secure Storage

### Mobile
- Use `expo-secure-store` to persist `userSecretKey`
- Decrypt on app launch → hydrate state

### Extension
- Encrypt `userSecretKey` with `deviceFingerprintKey`
- Store encrypted version in `chrome.storage.local`
- Decrypt in background → load RAM vault

---

## ☑️ Build Checklist

After every major change, always run:
```bash
npm run lint
npm run test
npm run build
```

Cursor must fix all errors and validate the code before considering the task done.

---

## 🤖 Cursor Summary Rules

- Never bypass platformAdapter
- Never persist decrypted data
- Never write platform logic in `app/` or `core/logic/`
- Always validate types, tests, build
- Only use Zustand for UI-bound data
- Run full validation cycle after structural changes
