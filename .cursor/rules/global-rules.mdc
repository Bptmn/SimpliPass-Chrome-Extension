---
description: 
globs: 
alwaysApply: true
---
# SimpliPass – Cursor Rules  
*(Chrome Extension + React Native Web Monorepo)*

**SimpliPass** is a secure, cross-platform password manager.  
It uses **React Native Web** for UI and a modular **monorepo architecture**, designed for shared usage across **Chrome Extension** and **Mobile App**.

## ⚙️ Cursor Execution Protocol (Updated Rule)

**Cursor must not wait for explicit confirmation to execute tasks.**  
It should behave like a proactive assistant with the following behavior:

### ✅ Cursor Must Always...
### 🧠 Think → Plan → Execute → Report

**Investigate the request thoroughly:**
- Understand the implications across files and architecture
- Anticipate side effects and dependencies

**Think before coding:**
- Evaluate alternatives and choose the cleanest scalable solution
- Don’t suggest multiple plans—just execute the best one unless told otherwise

**Plan the necessary steps:**
- Organize work into logical steps (e.g. update types → update logic → update UI)
- Only summarize the plan at the end for reporting, not before execution

**Execute immediately:**
- Make all the required code changes without asking again
- Don't break down requests unnecessarily unless there's ambiguity

**After major changes, always run:**
```bash
npm run lint
npm run build
npm run test
npm run storybook
```

- If any command fails, iterate and fix the issue
- Repeat until all commands succeed

**Summarize what was done:**
- At the end of execution, clearly list the files edited, what was changed, and which validations passed

### ❌ Cursor Must Never...
- Wait for permission to start once the task is clear  
- Ask if it should apply a fix when an error is encountered  
- Stop after generating code without applying it  
- Skip lint, build, test, or storybook checks after an important refactor  
- Leave incomplete logic or broken imports behind  

## 🧱 Architecture Principles

### 🧩 Monorepo with clearly isolated packages:
```
app/       → All visual UI (React Native)  
extension/ → Chrome-specific code (background, content, manifest)  
core/      → All shared app logic (auth, db, encryption, states, logic)  
shared/    → Static types, constants, crypto  
```

- 🔒 Encrypted data fetched from Firestore, decrypted locally in memory  
- 💾 Local decrypted data stored in `@/core/states` (RAM only, not persisted)  
- 🔃 Sync managed by Firestore listeners and automatic replacement in states  

## ✅ Cursor AI Must Always...

### 🧠 Architecture Compliance
- Respect package boundaries:
  - UI → `app/`
  - Logic → `core/`
  - Chrome APIs → `extension/`
  - Types/constants → `shared/`

- Use React Native components only:
  - `<View>`, `<Text>`, `<TextInput>`, `<Pressable>`, etc.
  - Never use HTML tags (`<div>`, `<span>`) or `document.querySelector`

- Use platform abstraction:
  - `useStorage()` for key-value
  - `useStates()` for decrypted data
  - `db/adapter.ts` for Firestore access
  - `auth/adapter.ts` for authentication layer
  - Never use Firebase or Amplify SDKs directly in screens or components

### 🎨 Design & Style System
- Use only tokens from `@/core/design/tokens`:  
  `colors`, `spacing`, `radius`, `typography`, `shadow`, `page`

- Use shared layout styles from `@/core/design/page.ts`:  
  `pageContainer`, `pageContent`, `pageSection`, `pageHeader`, etc.

- Use components from `app/components/`  
  Avoid inline styles or duplicated component code

- All UI must support both light and dark mode (via `useTheme()`)

### 🧪 Testing & Stability
- Write tests:
  - Logic functions → `*.test.ts` in `core/`
  - Crypto functions → must be unit-tested
  - UI behavior → `*.test.tsx` or story snapshot tests

- Write Storybook stories for all UI:
  - Story lives next to component in `components/`
  - Wrap in `ThemeProvider` for visual testing

- Run checks:
  - `npm run lint`, `npm run build`, `npm run test` must pass
  - Cursor must fix errors automatically when introducing new code

- Use `testID` and `accessibilityLabel` on all interactive components

- Build extension before finalizing work:
```bash
cd packages/extension && npm run build
```

## ❌ Cursor AI Must Never...
- Use `chrome.*` APIs inside React Native  
- Use `any` or `unknown` without justification  
- Hardcode spacing, font sizes, colors, radius  
- Write inline styles in `*.tsx` files  
- Duplicate logic — always refactor to `core/logic` or `core/utils`  
- Create visual components outside of `app/components`  
- Mix responsibilities — no data access in UI or vice versa  
- Break theme compatibility (must support dark/light)

## 📦 Folder Expectations
```
packages/
├── app/
│   ├── components/       # UI building blocks
│   ├── screens/          # Pages: HomePage, SettingsPage...
│   └── index.tsx         # RNW entrypoint
│
├── core/
│   ├── auth/             # auth/adapter.ts (Cognito, Firebase)
│   ├── database/         # db/adapter.ts (Firestore CRUD)
│   ├── design/           # design tokens (colors, typography, layout)
│   ├── logic/            # app logic (loginUser, getAllCredentials)
│   ├── states/           # local RAM stores (credentials, user, notes...)
│   ├── hooks/            # React hooks used by logic/screens
│   └── utils/            # encryption, validation, formatting...
│
├── extension/
│   ├── popup/            # Chrome extension popup rendered via RNW
│   ├── content.ts        # Content script
│   ├── background.ts     # Background script (JWT, autofill, etc.)
│   └── messaging/        # Communication bridge between parts
│
├── mobile/               # Placeholder for mobile app
│   └── (ios/android/)    # React Native native targets
│
├── shared/
│   ├── types.ts          # Types used globally
│   └── constants.ts      # Static values, error messages...
```

## 🧠 Coding Workflow for Cursor AI

- Use only `states/` to read/write decrypted data in UI  
- Never use raw Firestore SDK in UI, only through `db/adapter.ts`  
- For data logic (login, getCredentials, etc.) → use `logic/*.ts`  
- For UI → use `tokens` and layout styles, no hardcoded CSS  
- If UI is reused → create a component in `app/components/`  
- If UI is styled → add story + testID + accessibility  
- Run: `npm run lint`, `npm run build`, `npm run test`, `npm run storybook`  
- Add doc comments to every exported function  
