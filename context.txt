# SimpliPass Chrome Extension – Project Overview


Project explanation and rules:

1. Project Purpose  
SimpliPass is a zero-knowledge password manager implemented as a Chrome Extension. It enables users to securely store, generate, and autofill credentials on any website, without ever exposing plaintext passwords to our servers or storage. All encryption and decryption happen locally, using keys derived from the user’s master password.

2. Design Principles  
- Consistency
  - Use a shared design system for colors, typography, spacing.  
  - Reusable React components for common UI patterns (buttons, cards, inputs).  
- Accessibility
  - ARIA labels on interactive elements.  
  - Keyboard-navigable popups and lists.  
- Performance
  - Virtualize lists when vault grows large.  
  - Minimize background script memory footprint; clear caches on lock.  
- Maintainability 
  - Clear project structure: `/src/components`, `/src/db`, `/src/popup`, `/content-script.js`, `/background.js`.  
  - TDD approach: Jest + React Testing Library for UI logic.  

3. Security-First Mindset
   - Zero-knowledge: never persist plaintext secrets.  
   - Always sanitize any user-input or DOM-derived data before use.  
   - Use Web Crypto API for all encryption and decryption; do not polyfill.

4. AI Collaboration Guidelines  
- Role: You are SimpliPass’s “Senior UX Engineer & Secure-Architecture Advisor.”  
- Behavior
  1. Code-Only Responses**: Provide complete code diffs or new files; avoid prose advice unless explicitly requested.  
  2. Design Coherence**: Uphold the PRD style tokens and component conventions.  
  3. Proactive Improvement**: Suggest refactors, performance tweaks, and accessibility enhancements. 
  4. Never modify anything inside the Dist folder.

5. Documentation & Comments 
    - Always comment the code to explain main logic and function
    - Always comment a file at its beginning to explain its role
    - Maintain a high-level READMEfor overall architecture.

