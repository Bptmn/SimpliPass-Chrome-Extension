{"version":3,"file":"background.js","sources":["../packages/extension/background.ts"],"sourcesContent":["import { getUserSecretKey } from '@app/core/logic/user';\nimport { PageState } from '@app/core/types/types';\n\n\n/**\n * Stores page info per tab.\n */\nconst pageState: { [tabId: number]: PageState } = {};\n\nchrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {\n  // Do not initialize Firebase on every message\n\n  // Store page info\n  if (msg.type === 'PAGE_INFO' && sender.tab?.id != null) {\n    pageState[sender.tab.id] = { url: msg.url, domain: msg.domain, hasLoginForm: msg.hasLoginForm };\n  }\n\n  // Popup requests current page state\n  if (msg.type === 'GET_PAGE_STATE' && msg.tabId != null) {\n    sendResponse(pageState[msg.tabId] || null);\n    return true;\n  }\n\n  // Popup requests credential injection\n  if (\n    msg.type === 'INJECT_CREDENTIAL' &&\n    msg.credentialId &&\n    sender.tab &&\n    typeof sender.tab.id === 'number'\n  ) {\n    (async () => {\n      try {\n        const userSecretKey = await getUserSecretKey();\n        if (!userSecretKey) {\n          sendResponse({ success: false, error: 'User secret key not found' });\n          return;\n        }\n\n        // TODO: Get current user from extension state or messaging, as auth.getCurrentUser is not available.\n        // For now, return an error or empty result if currentUser is not available.\n        sendResponse({ success: false, error: 'User not authenticated (currentUser unavailable)' });\n        return;\n      } catch (error) {\n        sendResponse({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });\n      }\n    })();\n    return true;\n  }\n\n  // Handle in-page picker credential request\n  if (msg.type === 'GET_CACHED_CREDENTIALS' && msg.domain) {\n    (async () => {\n      try {\n        const userSecretKey = await getUserSecretKey();\n        if (!userSecretKey) {\n          sendResponse([]);\n          return;\n        }\n\n        // TODO: Get current user from extension state or messaging, as auth.getCurrentUser is not available.\n        // For now, return an error or empty result if currentUser is not available.\n        sendResponse({ success: false, error: 'User not authenticated (currentUser unavailable)' });\n        return;\n      } catch (error) {\n        console.error('Error getting cached credentials:', error);\n        sendResponse([]);\n      }\n    })();\n    return true; // async\n  }\n\n  // Handle user secret key request from content script\n  if (msg.type === 'GET_USER_SECRET_KEY') {\n    getUserSecretKey()\n      .then((key) => {\n        sendResponse({ key });\n      })\n      .catch(() => {\n        sendResponse({ key: null });\n      });\n    return true;\n  }\n});\n\nchrome.tabs.onActivated.addListener((activeInfo) => {\n  const tabId = activeInfo.tabId;\n  if (!pageState[tabId]) {\n    // Ask the content script to send page info\n    chrome.scripting.executeScript({\n      target: { tabId },\n      func: () => {\n        const domain = window.location.hostname;\n        const hasLogin = !!document.querySelector('form input[type=\"password\"]');\n        chrome.runtime.sendMessage({ type: 'PAGE_INFO', domain, hasLogin });\n      },\n    });\n  }\n});\n"],"names":[],"mappings":";;AAOA,MAAM,YAA4C,CAAA;AAElD,OAAO,QAAQ,UAAU,YAAY,CAAC,KAAK,QAAQ,iBAAiB;AAIlE,MAAI,IAAI,SAAS,eAAe,OAAO,KAAK,MAAM,MAAM;AACtD,cAAU,OAAO,IAAI,EAAE,IAAI,EAAE,KAAK,IAAI,KAAK,QAAQ,IAAI,QAAQ,cAAc,IAAI,aAAA;AAAA,EACnF;AAGA,MAAI,IAAI,SAAS,oBAAoB,IAAI,SAAS,MAAM;AACtD,iBAAa,UAAU,IAAI,KAAK,KAAK,IAAI;AACzC,WAAO;AAAA,EACT;AAGA,MACE,IAAI,SAAS,uBACb,IAAI,gBACJ,OAAO,OACP,OAAO,OAAO,IAAI,OAAO,UACzB;AACA,KAAC,YAAY;AACX,UAAI;AACF,cAAM,gBAAgB,MAAM,iBAAA;AAC5B,YAAI,CAAC,eAAe;AAClB,uBAAa,EAAE,SAAS,OAAO,OAAO,6BAA6B;AACnE;AAAA,QACF;AAIA,qBAAa,EAAE,SAAS,OAAO,OAAO,oDAAoD;AAC1F;AAAA,MACF,SAAS,OAAO;AACd,qBAAa,EAAE,SAAS,OAAO,OAAO,iBAAiB,QAAQ,MAAM,UAAU,iBAAiB;AAAA,MAClG;AAAA,IACF,GAAA;AACA,WAAO;AAAA,EACT;AAGA,MAAI,IAAI,SAAS,4BAA4B,IAAI,QAAQ;AACvD,KAAC,YAAY;AACX,UAAI;AACF,cAAM,gBAAgB,MAAM,iBAAA;AAC5B,YAAI,CAAC,eAAe;AAClB,uBAAa,CAAA,CAAE;AACf;AAAA,QACF;AAIA,qBAAa,EAAE,SAAS,OAAO,OAAO,oDAAoD;AAC1F;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,qCAAqC,KAAK;AACxD,qBAAa,CAAA,CAAE;AAAA,MACjB;AAAA,IACF,GAAA;AACA,WAAO;AAAA,EACT;AAGA,MAAI,IAAI,SAAS,uBAAuB;AACtC,qBAAA,EACG,KAAK,CAAC,QAAQ;AACb,mBAAa,EAAE,KAAK;AAAA,IACtB,CAAC,EACA,MAAM,MAAM;AACX,mBAAa,EAAE,KAAK,MAAM;AAAA,IAC5B,CAAC;AACH,WAAO;AAAA,EACT;AACF,CAAC;AAED,OAAO,KAAK,YAAY,YAAY,CAAC,eAAe;AAClD,QAAM,QAAQ,WAAW;AACzB,MAAI,CAAC,UAAU,KAAK,GAAG;AAErB,WAAO,UAAU,cAAc;AAAA,MAC7B,QAAQ,EAAE,MAAA;AAAA,MACV,MAAM,MAAM;AACV,cAAM,SAAS,OAAO,SAAS;AAC/B,cAAM,WAAW,CAAC,CAAC,SAAS,cAAc,6BAA6B;AACvE,eAAO,QAAQ,YAAY,EAAE,MAAM,aAAa,QAAQ,UAAU;AAAA,MACpE;AAAA,IAAA,CACD;AAAA,EACH;AACF,CAAC;"}